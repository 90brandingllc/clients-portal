rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Appointments rules
    match /appointments/{appointmentId} {
      // Users can create appointments
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own appointments, admins can read all
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Separate rule for admin access
      allow read: if request.auth != null && 
                 getUserRole(request.auth.uid) == 'admin';
      
      // Allow authenticated users to read appointments for slot availability checking
      // This allows reading appointment data to check if time slots are taken
      allow read: if request.auth != null;
      
      // Users can update their own pending appointments (for rescheduling)
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == 'pending';
      
      // Admins can update any appointment
      allow update: if request.auth != null && 
                   getUserRole(request.auth.uid) == 'admin';
      
      // Users can delete their own pending appointments (for cancellation)
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == 'pending';
      
      // Admins can delete any appointment
      allow delete: if request.auth != null && 
                   getUserRole(request.auth.uid) == 'admin';
    }
    
    // Support tickets rules
    match /tickets/{ticketId} {
      // Users can create their own tickets
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own tickets
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Admins can read and update all tickets
      allow read, update: if request.auth != null && 
                         getUserRole(request.auth.uid) == 'admin';
    }
    
    // Estimates rules
    match /estimates/{estimateId} {
      // Users can create their own estimates
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own estimates
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Admins can read and update all estimates
      allow read, update: if request.auth != null && 
                         getUserRole(request.auth.uid) == 'admin';
    }
    
    // Blocked slots rules (for appointment availability checking)
    match /blockedSlots/{slotId} {
      // All authenticated users can read blocked slots to check availability
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete blocked slots
      allow create, update, delete: if request.auth != null && 
                                   getUserRole(request.auth.uid) == 'admin';
    }
    

    
    // Helper function to get user role
    function getUserRole(uid) {
      let userDoc = get(/databases/$(database)/documents/users/$(uid));
      return userDoc != null && userDoc.data != null ? userDoc.data.role : 'client';
    }
  }
}
